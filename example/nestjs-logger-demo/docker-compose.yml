version: '3.9'

services:
  app:
    container_name: nest_backend
    image: nest_backend:1.0
    build:
      context: .
      args:
        - NODE_ENV=development
      # target: production
      dockerfile: ./Dockerfile
    command: npm run start:debug
    env_file: .env
    ports:
      - '3000:3000'
      - '9229:9229'
    networks:
      - app-network
    volumes:
      - .:/usr/src/app
      # - /usr/src/app/node_modules
    restart: unless-stopped
    depends_on:
      - database
      - kafka
  database:
    container_name: app_postgres_dev  
    user: postgres
    image: postgres:12
    env_file: .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - '5432:5432'
    # environment:
      # - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: pg_isready
      interval: 10s
      timeout: 5s
      retries: 5
  adminer:
    image: adminer
    restart: always
    networks:
      - app-network
    ports:
      - 8080:8080

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network
    ports:
      - 2181:2181
  
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,ZOOKEEPER://zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,ZOOKEEPER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
    ports:
      - 8081:8080
    networks:
      - app-network
    depends_on:
      - kafka
      - zookeeper 

networks:
  app-network:

volumes:
  postgres-data: